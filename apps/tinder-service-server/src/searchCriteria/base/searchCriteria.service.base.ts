/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SearchCriteria as PrismaSearchCriteria } from "@prisma/client";

export class SearchCriteriaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SearchCriteriaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.searchCriteria.count(args);
  }

  async searchCriteriaItems(
    args: Prisma.SearchCriteriaFindManyArgs
  ): Promise<PrismaSearchCriteria[]> {
    return this.prisma.searchCriteria.findMany(args);
  }
  async searchCriteria(
    args: Prisma.SearchCriteriaFindUniqueArgs
  ): Promise<PrismaSearchCriteria | null> {
    return this.prisma.searchCriteria.findUnique(args);
  }
  async createSearchCriteria(
    args: Prisma.SearchCriteriaCreateArgs
  ): Promise<PrismaSearchCriteria> {
    return this.prisma.searchCriteria.create(args);
  }
  async updateSearchCriteria(
    args: Prisma.SearchCriteriaUpdateArgs
  ): Promise<PrismaSearchCriteria> {
    return this.prisma.searchCriteria.update(args);
  }
  async deleteSearchCriteria(
    args: Prisma.SearchCriteriaDeleteArgs
  ): Promise<PrismaSearchCriteria> {
    return this.prisma.searchCriteria.delete(args);
  }
}
